{"version":3,"file":"api.js","sourceRoot":"src/","sources":["api.ts"],"names":[],"mappings":";;;AAIA,MAAa,cAAc;IACjB,QAAQ,GAAG,6CAA6C,CAAC;IAE1D,KAAK,CAAC,MAAM,CAAC,MAAoB;QACtC,MAAM,QAAQ,GAAG,MAAM,KAAK,CAC1B,GAAG,IAAI,CAAC,QAAQ,MAAM,IAAI,CAAC,gCAAgC,CACzD,MAAM,CAAC,OAAO,CACf,EAAE,CACJ,CAAC;QAEF,OAAO,CAAC,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAiB,CAAC;IACjD,CAAC;IAEO,gCAAgC,CACtC,OAAgC;QAEhC,MAAM,YAAY,GAA8B;YAC9C,KAAK,EAAE,SAAS;YAChB,MAAM,EAAE,UAAU;YAClB,SAAS,EAAE,aAAa;YACxB,OAAO,EAAE,SAAS;YAClB,IAAI,EAAE,MAAM;SACb,CAAC;QACF,OAAO,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;aACxB,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,OAAO,CAAC,KAAsC,CAAC,CAAC;aAClE,GAAG,CACF,CAAC,KAAK,EAAE,EAAE,CACR,GAAG,YAAY,CAAC,KAAK,CAAC,IACpB,OAAO,CAAC,KAAsC,CAChD,EAAE,CACL;aACA,IAAI,CAAC,GAAG,CAAC,CAAC;IACf,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,QAAgB;QACrC,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,IAAI,CAAC,QAAQ,IAAI,QAAQ,EAAE,CAAC,CAAC;QAC7D,MAAM,IAAI,GAAG,CAAC,MAAM,QAAQ,CAAC,IAAI,EAAE,CAA4B,CAAC;QAEhE,IAAK,IAAuB,CAAC,KAAK,EAAE;YAClC,MAAM,KAAK,CAAC,kBAAkB,CAAC,CAAC;SACjC;QACD,OAAO,IAAc,CAAC;IACxB,CAAC;CACF;AA3CD,wCA2CC","sourcesContent":["import { GetVolumeError } from \"./interfaces/errors\";\nimport { SearchParams, SearchResult } from \"./interfaces/search\";\nimport { Volume } from \"./types/volume\";\n\nexport class GoogleBooksAPI {\n  private BASE_URL = \"https://www.googleapis.com/books/v1/volumes\";\n\n  public async search(params: SearchParams): Promise<SearchResult> {\n    const response = await fetch(\n      `${this.BASE_URL}?q=${this.formatSearchFiltersToQueryString(\n        params.filters\n      )}`\n    );\n\n    return (await response.json()) as SearchResult;\n  }\n\n  private formatSearchFiltersToQueryString(\n    filters: SearchParams[\"filters\"]\n  ): string {\n    const mappedFields: { [key: string]: string } = {\n      title: \"intitle\",\n      author: \"inauthor\",\n      publisher: \"inpublisher\",\n      subject: \"subject\",\n      isbn: \"isbn\",\n    };\n    return Object.keys(filters)\n      .filter((param) => filters[param as keyof SearchParams[\"filters\"]])\n      .map(\n        (param) =>\n          `${mappedFields[param]}:${\n            filters[param as keyof SearchParams[\"filters\"]] as string\n          }`\n      )\n      .join(\"&\");\n  }\n\n  public async getVolume(volumeId: string): Promise<Volume> {\n    const response = await fetch(`${this.BASE_URL}/${volumeId}`);\n    const data = (await response.json()) as Volume | GetVolumeError;\n\n    if ((data as GetVolumeError).error) {\n      throw Error(\"Volume not found\");\n    }\n    return data as Volume;\n  }\n}\n"]}